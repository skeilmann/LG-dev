---
alwaysApply: true
---

Core Principles Always check existing Dawn code first. Before writing anything new:

Search /sections/ for similar functionality Check /snippets/ for reusable components Review /assets/base.css and /assets/component-\*.css for existing styles

Reference files in this project:

Study /sections/main-product.liquid for schema patterns Follow /sections/image-banner.liquid for media handling Use /snippets/icon.liquid for icon implementation Mirror /assets/component-card.css for BEM structure

File Structure Rules Section files (/sections/\*.liquid): liquid{%- comment -%} Filename: custom-hero.liquid Purpose: Homepage hero with video/image support Dependencies: icon.liquid snippet Created: 2025-01-15 {%- endcomment -%}

<div class="custom-hero">
  {%- # Your section code -%}
</div>

{% schema %} { "name": "Custom Hero", "settings": [ { "type": "image_picker", "id": "image", "label": "Background image" } ], "presets": [ { "name": "Custom Hero" } ] } {% endschema %} Snippet files (/snippets/\*.liquid): liquid{%- comment -%} Renders a custom product badge

Usage: {% render 'custom-badge', product: product, type: 'sale' %}

Parameters:

- product {Object} Required
- type {String} 'sale' | 'new' | 'featured' {%- endcomment -%} Naming convention:

Sections: custom-[purpose].liquid (e.g., custom-testimonials.liquid) Snippets: [component]-[variant].liquid (e.g., card-collection.liquid) All kebab-case, descriptive names

Liquid Code Standards DO this: liquid{%- liquid assign image = section.settings.image | default: product.featured_image assign has_video = section.settings.video_url != blank

if has_video assign mobile_image = section.settings.mobile_image | default: image endif -%}

{%- if image != blank -%} {{- image | image_url: width: 1920 | image_tag: loading: 'lazy', alt: image.alt -}} {%- endif -%} DON'T do this: liquid{% if section.settings.image %} <img src="{{ section.settings.image | img_url: '1920x' }}" alt=""> {% endif %} Key rules:

Use {%- liquid blocks for multiple assignments
Always filter output: | escape, | image_url, | url_encode
Check != blank not != nil or truthiness
Use render not include: {% render 'snippet', var: value %} Maximum 3 levels of nesting

Section Schema Patterns Complete schema template: json{ "name": "t:sections.custom_hero.name", "tag": "section", "class": "section", "disabled_on": { "groups": ["header", "footer"] }, "settings": [ { "type": "image_picker", "id": "image", "label": "t:sections.custom_hero.settings.image.label" }, { "type": "range", "id": "height", "min": 400, "max": 800, "step": 50, "unit": "px", "label": "Section height", "default": 600 }, { "type": "select", "id": "text_alignment", "label": "Text alignment", "options": [ { "value": "left", "label": "Left" }, { "value": "center", "label": "Center" }, { "value": "right", "label": "Right" } ], "default": "center" } ], "blocks": [ { "type": "heading", "name": "Heading", "limit": 1, "settings": [ { "type": "text", "id": "heading", "label": "Heading text", "default": "Welcome" } ] } ], "presets": [ { "name": "Custom Hero", "blocks": [ { "type": "heading" } ] } ] } Schema rules:

Always include name, settings, and presets Use t: for translations when possible Set sensible default values Include info for complex settings Limit blocks if only one makes sense ("limit": 1)

CSS Standards Use Dawn's existing classes first: liquid<div class="page-width section-{{ section.id }}-padding">

  <div class="grid grid--2-col-tablet grid--4-col-desktop">
    <div class="grid__item">
      <h2 class="h1">{{ section.settings.heading }}</h2>
    </div>
  </div>
</div>
Common Dawn utility classes:

Layout: page-width, page-width--narrow, content-container Grid: grid, grid--2-col, grid--gapless, grid\_\_item Spacing: section-{{ section.id }}-padding, small-hide, medium-hide Typography: h0, h1, h2, body, caption-large Buttons: button, button--secondary, button--full-width

When writing custom CSS: css/_ File: assets/custom-hero.css _/ .custom-hero { position: relative; min-height: 60vh; }

.custom-hero\_\_content { position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; }

.custom-hero\_\_heading { color: rgb(var(--color-foreground)); font-size: calc(var(--font-heading-scale) \* 4rem); }

@media screen and (max-width: 749px) { .custom-hero\_\_heading { font-size: calc(var(--font-heading-scale) \* 2rem); } } CSS rules:

Use BEM: .block\_\_element--modifier Use Dawn's CSS variables: rgb(var(--color-background)), var(--font-body-scale) Mobile-first media queries: @media screen and (min-width: 750px) No inline styles, no !important

JavaScript Standards Load scripts in section file: liquid<script src="{{ 'custom-hero.js' | asset_url }}" defer="defer"></script> JavaScript pattern: javascript// File: assets/custom-hero.js if (!customElements.get('custom-hero')) { class CustomHero extends HTMLElement { constructor() { super(); this.init(); }

    init() {
      this.videoElement = this.querySelector('video');
      if (this.videoElement) {
        this.setupVideo();
      }
    }

    setupVideo() {
      this.videoElement.addEventListener('click', () => {
        if (this.videoElement.paused) {
          this.videoElement.play();
        } else {
          this.videoElement.pause();
        }
      });
    }

}

customElements.define('custom-hero', CustomHero); } JS rules:

Use Web Components pattern (like Dawn does) Vanilla JS only, no jQuery Use defer for non-critical scripts Handle errors with try-catch for external calls Use data attributes for JS hooks: data-section-id="{{ section.id }}"

Metafields Integration Check metafield exists: liquid{%- liquid
  assign size_guide = product.metafields.custom.size_guide
  assign care_instructions = product.metafields.custom.care_instructions
-%}

{%- if size_guide != blank -%}

  <div class="product-metafield">
    <h3>{{ 'products.size_guide' | t }}</h3>
    {{ size_guide }}
  </div>
{%- endif -%}
Dynamic metafield in schema:
json{
  "type": "text",
  "id": "custom_field",
  "label": "Custom text",
  "info": "Supports metafields: product.metafields.custom.*"
}
Metafield rules:

Use namespace custom.\* for project-specific fields Always validate != blank before rendering Document required metafields in file header Provide fallback values where appropriate

Performance Checklist Image optimization: liquid{%- # Correct -%} {{ image | image_url: width: 1920 | image_tag: loading: 'lazy', alt: image.alt }}

{%- # Wrong -%} <img src="{{ image | img_url: '1920x' }}"> Avoid expensive loops: liquid{%- # Bad: O(nÂ²) -%} {% for product in collection.products %} {% for tag in product.tags %} {%- # nested loop -%} {% endfor %} {% endfor %}

{%- # Better: cache and filter -%} {%- assign featured_products = collection.products | where: "tags", "featured" -%} {% for product in featured_products limit: 4 %} {%- # single loop -%} {% endfor %} Performance rules:

Use loading="lazy" for below-fold images Paginate long lists: {% paginate collection.products by 24 %} Cache expensive operations in variables Limit collection queries (use limit: N)

Accessibility Requirements Semantic HTML: liquid<section aria-labelledby="hero-heading">

  <h1 id="hero-heading">{{ section.settings.heading }}</h1>
  
  <button type="button" aria-label="Play video">
    {% render 'icon', icon: 'play' %}
  </button>
</section>
```

**Accessibility checklist:**

- [ ] One `<h1>` per page, logical heading order
- [ ] All images have descriptive `alt` text (or `alt=""` if decorative)
- [ ] Interactive elements keyboard-accessible (test with Tab key)
- [ ] Buttons use `<button>`, links use `<a>`
- [ ] Forms have associated `<label>` elements
- [ ] Color contrast minimum 4.5:1 for text
- [ ] ARIA attributes where needed: `aria-label`, `aria-describedby`

---

## Git Workflow

**Commit message format:**

```
feat(section): add video hero with autoplay
fix(snippet): product card image aspect ratio
style(section): improve mobile spacing
refactor(snippet): simplify icon rendering
perf(section): lazy load collection images
Prefixes:

feat: new feature or section
fix: bug fix
style: formatting, spacing (no logic change)
refactor: code restructure (same functionality)
perf: performance improvement
docs: documentation only


Quick Reference
Before creating new code:

Search project for similar functionality
Check Dawn's default sections for patterns
Review existing snippets for reusable components

Common Dawn files to reference:

/sections/main-product.liquid - complex schema
/sections/image-banner.liquid - media handling
/snippets/card-product.liquid - component structure
/assets/component-card.css - BEM patterns
/assets/global.js - JS utilities

Testing checklist:

 Works in Theme Editor with all setting combinations
 Responsive on mobile, tablet, desktop (test at 375px, 768px, 1440px)
 No console errors
 Accessible (keyboard nav, screen reader friendly)
 Fast (check Lighthouse score)
```
