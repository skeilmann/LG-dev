{% comment %}
  Get current country and set appropriate threshold from LG-progress-bar block
{% endcomment %}
{% assign current_country = localization.country.iso_code %}

{% comment %}
  Find the LG-progress-bar block to get thresholds
  We'll look for it in the current section's blocks or use fallback values
{% endcomment %}
{% assign lg_block = null %}
{% for block in section.blocks %}
  {% if block.type == 'LG-progress-bar' %}
    {% assign lg_block = block %}
    {% break %}
  {% endif %}
{% endfor %}

{% comment %}
  Set different thresholds based on country/region groups using block settings
{% endcomment %}
{% if lg_block %}
  {% case current_country %}
    {% when 'MD' %}
      {% assign free_shipping_goal = lg_block.settings.moldova_threshold %}
    {% when 'RO' %}
      {% assign free_shipping_goal = lg_block.settings.romania_threshold %}
    {% when 'DE',
      'FR',
      'IT',
      'ES',
      'NL',
      'BE',
      'AT',
      'CH',
      'GB',
      'IE',
      'PT',
      'SE',
      'NO',
      'DK',
      'FI',
      'PL',
      'CZ',
      'SK',
      'HU',
      'BG',
      'HR',
      'SI',
      'EE',
      'LV',
      'LT',
      'MT',
      'CY',
      'LU',
      'GR'
    %}
      {% assign free_shipping_goal = lg_block.settings.europe_threshold %}
    {% else %}
      {% assign free_shipping_goal = lg_block.settings.world_threshold %}
  {% endcase %}
{% else %}
  {% comment %}
    Fallback values if block is not found
  {% endcomment %}
  {% case current_country %}
    {% when 'MD' %}
      {% assign free_shipping_goal = 500 %}
    {% when 'RO' %}
      {% assign free_shipping_goal = 1000 %}
    {% when 'DE',
      'FR',
      'IT',
      'ES',
      'NL',
      'BE',
      'AT',
      'CH',
      'GB',
      'IE',
      'PT',
      'SE',
      'NO',
      'DK',
      'FI',
      'PL',
      'CZ',
      'SK',
      'HU',
      'BG',
      'HR',
      'SI',
      'EE',
      'LV',
      'LT',
      'MT',
      'CY',
      'LU',
      'GR'
    %}
      {% assign free_shipping_goal = 3000 %}
    {% else %}
      {% assign free_shipping_goal = 5000 %}
  {% endcase %}
{% endif %}

{% assign free_shipping_goal_cents = free_shipping_goal | times: 100 %}
{% comment %}
  Note: Shopify returns prices in cents. So we multiply by 100 to compare correctly.
{% endcomment %}

<div class="page-width">
  <div
    id="free-shipping-bar-{{ section.id }}"
    class="free-shipping-bar"
    data-free-shipping-goal="{{ free_shipping_goal_cents }}"
    data-current-country="{{ current_country }}"
    data-currency-symbol="{{ cart.currency.symbol }}"
    data-translations="{{ 'general.free_shipping.title' | t }},{{ 'general.free_shipping.add_more' | t }},{{ 'general.free_shipping.more_for_free_shipping' | t }},{{ 'general.free_shipping.you_qualify' | t }},{{ 'general.free_shipping.remaining_amount' | t }}"
    data-thresholds="{{ lg_block.settings.moldova_threshold | default: 500 }},{{ lg_block.settings.romania_threshold | default: 1000 }},{{ lg_block.settings.europe_threshold | default: 3000 }},{{ lg_block.settings.world_threshold | default: 5000 }}"
  >
    <div class="free-shipping-header">
      <h3 class="free-shipping-title">{{ 'general.free_shipping.title' | t }}</h3>
      <div class="free-shipping-amount">
        <span class="free-shipping-current">{{ cart.total_price | money }}</span>
        <span> / </span>
        <span class="free-shipping-target">{{ free_shipping_goal | times: 100 | money }}</span>
      </div>
    </div>

    <div class="progress-bar-container" style="background-color: {{ section.settings.bar_background }};">
      <div
        class="progress-bar-fill"
        style="background-color: {{ section.settings.bar_color }}; width: 0%;"
      ></div>
    </div>

    <div class="free-shipping-message">
      <span class="free-shipping-text"></span>
    </div>
  </div>
</div>

<script>
  (function () {
    class FreeShippingBar {
      constructor() {
        this.element = document.getElementById('free-shipping-bar-{{ section.id }}');
        if (!this.element) return;

        this.freeShippingGoal = parseInt(this.element.dataset.freeShippingGoal);
        this.currentCountry = this.element.dataset.currentCountry;
        this.currencySymbol = this.element.dataset.currencySymbol;

        // Parse thresholds from data attribute
        const thresholds = this.element.dataset.thresholds.split(',').map((t) => parseInt(t));
        this.thresholds = {
          moldova: thresholds[0],
          romania: thresholds[1],
          europe: thresholds[2],
          world: thresholds[3],
        };

        // Parse translations
        const translations = this.element.dataset.translations.split(',');
        this.translations = {
          title: translations[0],
          addMore: translations[1],
          moreForFreeShipping: translations[2],
          youQualify: translations[3],
          remainingAmount: translations[4],
        };

        this.progressBar = this.element.querySelector('.progress-bar-fill');
        this.currentAmount = this.element.querySelector('.free-shipping-current');
        this.targetAmount = this.element.querySelector('.free-shipping-target');
        this.messageText = this.element.querySelector('.free-shipping-text');

        this.init();
      }

      init() {
        this.updateProgress();
        this.setupCartListener();
        this.setupCountryChangeListener();
      }

      setupCountryChangeListener() {
        // Listen for country changes via form submissions
        document.addEventListener('submit', (event) => {
          if (event.target.classList.contains('localization-form')) {
            setTimeout(() => {
              this.updateThresholdForCountry();
            }, 1000);
          }
        });

        // Listen for URL changes that might indicate country change
        let currentUrl = window.location.href;
        setInterval(() => {
          if (window.location.href !== currentUrl) {
            currentUrl = window.location.href;
            setTimeout(() => {
              this.updateThresholdForCountry();
            }, 500);
          }
        }, 1000);
      }

      updateThresholdForCountry() {
        const countryElement = document.querySelector('[data-value]');
        if (countryElement) {
          const newCountry = countryElement.dataset.value;
          if (newCountry && newCountry !== this.currentCountry) {
            this.currentCountry = newCountry;
            this.updateThreshold();
            this.fetchCartAndUpdate();
          }
        }
      }

      updateThreshold() {
        let newThreshold;

        switch (this.currentCountry) {
          case 'MD':
            newThreshold = this.thresholds.moldova;
            break;
          case 'RO':
            newThreshold = this.thresholds.romania;
            break;
          case 'DE':
          case 'FR':
          case 'IT':
          case 'ES':
          case 'NL':
          case 'BE':
          case 'AT':
          case 'CH':
          case 'GB':
          case 'IE':
          case 'PT':
          case 'SE':
          case 'NO':
          case 'DK':
          case 'FI':
          case 'PL':
          case 'CZ':
          case 'SK':
          case 'HU':
          case 'BG':
          case 'HR':
          case 'SI':
          case 'EE':
          case 'LV':
          case 'LT':
          case 'MT':
          case 'CY':
          case 'LU':
          case 'GR':
            newThreshold = this.thresholds.europe;
            break;
          default:
            newThreshold = this.thresholds.world;
            break;
        }

        this.freeShippingGoal = newThreshold * 100;
        this.targetAmount.textContent = this.formatMoney(this.freeShippingGoal);
        this.updateProgress();
      }

      setupCartListener() {
        // Listen for custom cart events
        document.addEventListener('cart:updated', () => {
          this.fetchCartAndUpdate();
        });

        // Listen for cart drawer events
        document.addEventListener('cart:drawer:opened', () => {
          this.fetchCartAndUpdate();
        });

        // Listen for quantity changes
        document.addEventListener('change', (event) => {
          if (event.target.matches('[name="updates[]"], .quantity-input, .cart-quantity')) {
            setTimeout(() => this.fetchCartAndUpdate(), 300);
          }
        });

        // Listen for remove buttons
        document.addEventListener('click', (event) => {
          if (event.target.matches('.cart-remove, .remove-item, [data-action="remove"]')) {
            setTimeout(() => this.fetchCartAndUpdate(), 300);
          }
        });

        // Listen for add to cart forms
        document.addEventListener('submit', (event) => {
          if (event.target.matches('form[action*="/cart/add"], .add-to-cart-form')) {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          }
        });

        // Listen for quick add buttons
        document.addEventListener('click', (event) => {
          if (event.target.matches('.quick-add, .quick-add-button, [data-quick-add]')) {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          }
        });

        // Initial load
        document.addEventListener('DOMContentLoaded', () => {
          this.fetchCartAndUpdate();
        });
      }

      async fetchCartAndUpdate() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          this.updateProgressWithCart(cart);
        } catch (error) {
          console.error('Error fetching cart:', error);
          this.updateProgressWithCart({ total_price: 0 });
        }
      }

      updateProgressWithCart(cart) {
        const cartTotal = cart.total_price;
        this.currentAmount.textContent = this.formatMoney(cartTotal);

        if (cartTotal === 0) {
          this.showEmptyCartMessage();
          return;
        }

        const percentage = Math.min((cartTotal / this.freeShippingGoal) * 100, 100);
        this.progressBar.style.width = percentage + '%';

        if (cartTotal >= this.freeShippingGoal) {
          this.messageText.innerHTML =
            '<span style="color: #28a745; font-weight: 600;">' + this.translations.youQualify + '</span>';
        } else {
          const remaining = this.freeShippingGoal - cartTotal;
          const remainingFormatted = this.formatMoney(remaining);
          this.messageText.textContent = this.translations.remainingAmount.replace('__AMOUNT__', remainingFormatted);
        }
      }

      showEmptyCartMessage() {
        this.progressBar.style.width = '0%';
        this.messageText.textContent = this.translations.addMore;
      }

      updateProgress() {
        const cartTotalElement = document.querySelector('[data-cart-total]');
        let cartTotal = 0;

        if (cartTotalElement) {
          cartTotal = parseInt(cartTotalElement.dataset.cartTotal) || 0;
        } else {
          const cartTotalText = document.querySelector('.cart-total, .cart__total, [class*="total"]');
          if (cartTotalText) {
            const totalMatch = cartTotalText.textContent.match(/[\d,]+/);
            cartTotal = totalMatch ? parseInt(totalMatch[0].replace(/,/g, '')) * 100 : 0;
          }
        }

        if (cartTotal === 0) {
          this.showEmptyCartMessage();
          return;
        }

        const percentage = Math.min((cartTotal / this.freeShippingGoal) * 100, 100);
        this.progressBar.style.width = percentage + '%';

        if (cartTotal >= this.freeShippingGoal) {
          this.messageText.innerHTML =
            '<span style="color: #28a745; font-weight: 600;">' + this.translations.youQualify + '</span>';
        } else {
          const remaining = this.freeShippingGoal - cartTotal;
          const remainingFormatted = this.formatMoney(remaining);
          this.messageText.textContent = this.translations.remainingAmount.replace('__AMOUNT__', remainingFormatted);
        }
      }

      formatMoney(cents) {
        return this.currencySymbol + (cents / 100).toFixed(2);
      }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => new FreeShippingBar());
    } else {
      new FreeShippingBar();
    }
  })();
</script>

{% schema %}
{
  "name": "Free Shipping Bar",
  "settings": [
    {
      "type": "header",
      "content": "Style Settings"
    },
    {
      "type": "color",
      "id": "bar_color",
      "label": "Bar color",
      "default": "#ff6699"
    },
    {
      "type": "color",
      "id": "bar_background",
      "label": "Background color",
      "default": "#eee"
    },
    {
      "type": "checkbox",
      "id": "show_on_homepage",
      "label": "Show on home page",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "LG-progress-bar",
      "name": "LG Progress Bar",
      "limit": 1,
      "settings": [
        {
          "type": "header",
          "content": "Free Shipping Thresholds"
        },
        {
          "type": "range",
          "id": "moldova_threshold",
          "min": 100,
          "max": 5000,
          "step": 100,
          "unit": "$",
          "label": "Moldova threshold",
          "default": 500
        },
        {
          "type": "range",
          "id": "romania_threshold",
          "min": 100,
          "max": 5000,
          "step": 100,
          "unit": "$",
          "label": "Romania threshold",
          "default": 1000
        },
        {
          "type": "range",
          "id": "europe_threshold",
          "min": 100,
          "max": 5000,
          "step": 100,
          "unit": "$",
          "label": "Europe threshold",
          "default": 3000
        },
        {
          "type": "range",
          "id": "world_threshold",
          "min": 100,
          "max": 5000,
          "step": 100,
          "unit": "$",
          "label": "World threshold",
          "default": 5000
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Free Shipping Progress Bar"
    }
  ]
}
{% endschema %}
