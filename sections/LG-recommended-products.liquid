{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- assign product = product | default: null -%}
{%- assign collection = collection | default: null -%}
{%- assign enable_slider = section.settings.enable_slider -%}
{%- assign product_limit = section.settings.product_limit | default: 4 -%}
{%- assign fallback_collection = section.settings.fallback_collection -%}

<div class="recommended-products-section">
  <div class="page-width">
    <div class="recommended-products__header">
      <h2 class="h3">Recommended for you</h2>
    </div>
    <slider-component
      class="{% if enable_slider %}slider-component-desktop{% else %}page-width-desktop{% endif %}"
      style="overflow:visible;"
    >
      <ul
        id="RecommendedSlider-{{ section.id }}"
        class="grid product-grid contains-card contains-card--product grid--{{ product_limit }}-col-desktop{% if enable_slider %} slider slider--desktop{% endif %}"
        role="list"
        aria-label="Recommended products slider"
        style="margin:0;padding:0;list-style:none;"
      ></ul>
      <div id="recommended-slider-buttons-{{ section.id }}" style="display:none;">
        <div class="slider-buttons">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="Previous slide"
            aria-controls="RecommendedSlider-{{ section.id }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true"> / </span>
            <span class="visually-hidden">of</span>
            <span class="slider-counter--total">1</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="Next slide"
            aria-controls="RecommendedSlider-{{ section.id }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
        </div>
      </div>
    </slider-component>
  </div>
</div>

<script>
const recommendedList = document.getElementById('RecommendedSlider-{{ section.id }}');
const sliderButtons = document.getElementById('recommended-slider-buttons-{{ section.id }}');

async function displayRecommendedProducts() {
  let recommendedProducts = [];
  // Try dynamic recommendations (Shopify endpoint)
  let productId = null;
  {% if product and product.id %}
    productId = {{ product.id }};
  {% else %}
    try {
      var guestFavorites = JSON.parse(localStorage.getItem('guestFavorites')) || [];
      if (guestFavorites.length > 0 && guestFavorites[0].id) {
        productId = guestFavorites[0].id;
      }
    } catch (e) {}
  {% endif %}

  if (productId) {
    try {
      const response = await fetch(`/recommendations/products.json?product_id=${productId}&limit={{ product_limit }}`);
      if (response.ok) {
        const data = await response.json();
        if (data.products && data.products.length > 0) {
          recommendedProducts = data.products;
        }
      }
    } catch (e) {}
  }

  // Fallback to static collection if needed
  var hasFallback = {% if fallback_collection != blank %}true{% else %}false{% endif %};
  if (recommendedProducts.length === 0 && hasFallback) {
    try {
      const response = await fetch('/collections/{{ fallback_collection.handle }}/products.json?limit={{ product_limit }}');
      if (response.ok) {
        const data = await response.json();
        if (data.products && data.products.length > 0) {
          recommendedProducts = data.products;
        }
      }
    } catch (e) {}
  }

  recommendedList.innerHTML = '';
  let slideIndex = 1;
  if (recommendedProducts.length === 0) {
    recommendedList.innerHTML = '<li><p>No recommendations available.</p></li>';
    sliderButtons.style.display = 'none';
    return;
  }
  for (const prod of recommendedProducts) {
    try {
      const response = await fetch(`/products/${prod.handle}?section_id=card-product-standalone`);
      if (!response.ok) continue;
      const productCardHTML = await response.text();
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = productCardHTML;
      const card = tempDiv.querySelector('.card-wrapper');
      if (card) {
        const li = document.createElement('li');
        li.className = 'grid__item{% if enable_slider %} slider__slide{% endif %}';
        {% if enable_slider %}
        li.id = 'Slide-{{ section.id }}-' + slideIndex;
        slideIndex++;
        {% endif %}
        li.appendChild(card);
        recommendedList.appendChild(li);
      }
    } catch (error) {
      // skip
    }
  }
  // Show slider buttons only if slider enabled and more than 1 product
  if ({{ enable_slider | json }} && recommendedProducts.length > 1) {
    sliderButtons.style.display = '';
    const sliderComponent = recommendedList.closest('slider-component');
    // Only call resetPages if the sliderComponent contains at least one .slider__slide
    if (sliderComponent && sliderComponent.querySelector('.slider__slide')) {
      if (typeof sliderComponent.resetPages === 'function') {
        sliderComponent.resetPages();
      } else {
        if (window.Shopify && Shopify.theme && typeof Shopify.theme.initSliders === 'function') {
          Shopify.theme.initSliders();
        }
        window.dispatchEvent(new Event('resize'));
      }
    }
  } else {
    sliderButtons.style.display = 'none';
  }
}
displayRecommendedProducts();
</script>

{% schema %}
{
  "name": "Recommended Products",
  "settings": [
    {
      "type": "range",
      "id": "product_limit",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Number of products to show"
    },
    {
      "type": "checkbox",
      "id": "enable_slider",
      "label": "Show as slider",
      "default": false
    },
    {
      "type": "collection",
      "id": "fallback_collection",
      "label": "Fallback collection (if no product/collection)"
    }
  ],
  "presets": [
    {
      "name": "Recommended Products"
    }
  ]
}
{% endschema %}
