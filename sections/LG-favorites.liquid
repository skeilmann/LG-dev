{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- assign columns = section.settings.columns_desktop | default: 4 -%}
{%- assign enable_slider = section.settings.enable_desktop_slider -%}

<div class="lg-favorites-section">
  <div class="page-width">
    <div class="lg-favorites__header">
      <h1 class="h2">Your Favorite Products</h1>
    </div>
    <slider-component class="{% if enable_slider %}slider-component-desktop{% else %}page-width-desktop{% endif %}">
      <ul
        id="Slider-{{ section.id }}"
        class="grid product-grid contains-card contains-card--product grid--{{ columns }}-col-desktop{% if enable_slider %} slider slider--desktop{% endif %}"
        role="list"
        aria-label="Your favorite products slider"
      ></ul>
      {% if enable_slider %}
        <div class="slider-buttons">
          <button
            type="button"
            class="slider-button slider-button--prev"
            name="previous"
            aria-label="Previous slide"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
          <div class="slider-counter caption">
            <span class="slider-counter--current">1</span>
            <span aria-hidden="true"> / </span>
            <span class="visually-hidden">of</span>
            <span class="slider-counter--total">1</span>
          </div>
          <button
            type="button"
            class="slider-button slider-button--next"
            name="next"
            aria-label="Next slide"
            aria-controls="Slider-{{ section.id }}"
          >
            <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
          </button>
        </div>
      {% endif %}
    </slider-component>
  </div>
</div>

<script>
  const productList = document.getElementById('Slider-{{ section.id }}');

  async function displayProductsFromLocalStorage() {
    const guestFavorites = JSON.parse(localStorage.getItem('guestFavorites')) || [];
    const productHandles = guestFavorites.map((fav) => fav.handle).filter(Boolean);
    if (productHandles.length === 0) {
      productList.innerHTML = '<li><p>No recently viewed products.</p></li>';
      return;
    }
    productList.innerHTML = '';
    let slideIndex = 1;
    for (const handle of productHandles) {
      try {
        const response = await fetch(`/products/${handle}?section_id=card-product-standalone`);
        if (!response.ok) continue;
        const productCardHTML = await response.text();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = productCardHTML;
        const card = tempDiv.querySelector('.card-wrapper');
        if (card) {
          const li = document.createElement('li');
          li.className = 'grid__item{% if enable_slider %} slider__slide{% endif %}';
          {% if enable_slider %}
          li.id = 'Slide-{{ section.id }}-' + slideIndex;
          slideIndex++;
          {% endif %}
          li.appendChild(card);
          productList.appendChild(li);
        }
      } catch (error) {
        // skip
      }
    }
    {% if enable_slider %}
    const sliderComponent = productList.closest('slider-component');
    if (sliderComponent && typeof sliderComponent.resetPages === 'function') {
      sliderComponent.resetPages();
    } else if (sliderComponent) {
      window.dispatchEvent(new Event('resize'));
    }
    {% endif %}
  }
  displayProductsFromLocalStorage();
</script>

{% schema %}
{
  "name": "Favorites",
  "settings": [
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "Products per row"
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "Enable desktop slider",
      "default": false
    }
  ],
  "presets": [
    {
      "name": "Favorites section"
    }
  ]
}
{% endschema %}
