<div class="filter-wrapper" data-filter-container data-section-id="{{ section.id }}">
  <div class="filter-buttons">
    {%- for collection in section.settings.filter_collections -%}
      <button
        class="filter-button"
        data-filter="{{ collection.handle }}"
        data-section-id="{{ section.id }}"
        aria-pressed="false"
        role="switch"
      >
        <div class="filter-item-content">
          <img
            src="{{ collection.image | image_url: width: 50 }}"
            alt="{{ collection.title }}"
            class="filter-image"
            width="50"
            height="50"
          >
          <span class="filter-title">{{ collection.title }}</span>
        </div>
      </button>
    {%- endfor -%}
  </div>
</div>

<style>
  .filter-wrapper {
    margin-bottom: 3rem;
  }

  .filter-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .filter-button {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.8rem 1.5rem;
    background-color: #fff;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 10rem;
    cursor: pointer;
    font-size: 1.4rem;
    transition: all 0.3s ease;
    text-decoration: none;
    color: inherit;
    text-transform: lowercase;
  }

  .filter-button:hover {
    box-shadow: 0 0 15px 1px rgba(0, 0, 0, 0.1);
  }

  .filter-button.active {
    background-color: #000;
    color: #fff;
    border-color: #000;
  }

  .filter-item-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .filter-image {
    width: 5rem;
    height: 5rem;
    object-fit: cover;
    border-radius: 50%;
  }

  .filter-status {
    text-align: center;
    margin-top: 1rem;
    font-size: 1.4rem;
  }

  .filter-clear {
    background: none;
    border: none;
    color: #666;
    text-decoration: underline;
    cursor: pointer;
    padding: 0.5rem;
    margin-left: 1rem;
  }

  .grid__item {
    transition: opacity 0.3s ease-in-out, height 0.3s ease-in-out, margin 0.3s ease-in-out, padding 0.3s ease-in-out;
  }

  .grid__item.filtered-out {
    opacity: 0;
    height: 0;
    margin: 0 !important;
    padding: 0 !important;
    overflow: hidden;
    position: absolute;
    pointer-events: none;
  }

  @media screen and (max-width: 749px) {
    .filter-button {
      font-size: 1.2rem;
      padding: 0.6rem 1.2rem;
    }

    .filter-image {
      width: 4rem;
      height: 4rem;
    }
  }
</style>

<script>
  if (typeof ProductFilter === 'undefined') {
    class ProductFilter {
      constructor(container) {
        this.container = container;

        // Get section ID with fallback
        this.sectionId = this.container.dataset.sectionId;
        if (!this.sectionId) {
          const sectionElement = this.container.closest('[data-section-id]');
          this.sectionId = sectionElement ? sectionElement.dataset.sectionId : null;
        }
        this.buttons = this.container.querySelectorAll('.filter-button');
        this.products = document.querySelectorAll(`[data-section-id="${this.sectionId}"]`);
        this.activeFilters = new Set();
        this.countElement = document.createElement('div');
        this.countElement.className = 'filter-status';
        this.container.appendChild(this.countElement);

        this.init();
      }

      init() {
        this.buttons.forEach((button) => {
          button.addEventListener('click', this.handleFilterClick.bind(this));
        });

        if (this.clearButton) {
          this.clearButton.addEventListener('click', this.clearFilters.bind(this));
        }

        // Show all products initially
        this.updateProductVisibility();
        this.updateFilterCount();
      }

      handleFilterClick(event) {
        const button = event.currentTarget;
        const filter = button.dataset.filter;

        if (button.classList.contains('active')) {
          this.activeFilters.delete(filter);
        } else {
          this.activeFilters.add(filter);
        }

        button.classList.toggle('active');
        button.setAttribute('aria-pressed', button.classList.contains('active'));

        this.updateProductVisibility();
        this.updateFilterCount();
      }

      updateProductVisibility() {
        let visibleCount = 0;

        this.products.forEach((product) => {
          // Get product collections and log for debugging
          const productCollections = (product.dataset.collections || '').split(',').filter(Boolean);

          // Determine visibility
          const isVisible =
            this.activeFilters.size === 0 || // Show all if no filters active
            [...this.activeFilters].some((filter) => productCollections.includes(filter));

          // Update product visibility
          if (isVisible) {
            product.classList.remove('filtered-out');
            visibleCount++;
          } else {
            product.classList.add('filtered-out');
          }
        });

        // If no products are visible after filtering, hide all
        if (visibleCount === 0 && this.activeFilters.size > 0) {
          this.products.forEach((product) => {
            product.classList.add('filtered-out');
          });
        }

        return visibleCount;
      }

      updateFilterCount() {
        if (!this.countElement) return;

        const totalCount = this.products.length;
        const visibleCount = this.updateProductVisibility();

        if (this.activeFilters.size === 0) {
          this.countElement.textContent = '';
        } else {
          this.countElement.textContent = `${visibleCount} of ${totalCount} products`;
        }
      }

      clearFilters() {
        this.activeFilters.clear();

        this.buttons.forEach((button) => {
          button.classList.remove('active');
          button.setAttribute('aria-pressed', 'false');
        });

        this.updateProductVisibility();
        this.updateFilterCount();
      }
    }

    // Initialize filters
    document.addEventListener('DOMContentLoaded', () => {
      const filterContainers = document.querySelectorAll('[data-filter-container]');
      filterContainers.forEach((container) => {
        new ProductFilter(container);
      });
    });
  } else {
    // If class already exists, just initialize new instances
    document.addEventListener('DOMContentLoaded', () => {
      const filterContainers = document.querySelectorAll('[data-filter-container]');
      filterContainers.forEach((container) => {
        new ProductFilter(container);
      });
    });
  }
</script>
