{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% comment %}
  Get current country and set appropriate threshold
{% endcomment %}
{% assign current_country = localization.country.iso_code %}
{% assign free_shipping_threshold = block.settings.threshold %}

{% comment %}
  Set different thresholds based on country/region groups
{% endcomment %}
{% case current_country %}
  {% when 'MD' %}
    {% assign free_shipping_threshold = block.settings.moldova_threshold %}
  {% when 'RO' %}
    {% assign free_shipping_threshold = block.settings.romania_threshold %}
  {% when 'DE',
    'FR',
    'IT',
    'ES',
    'NL',
    'BE',
    'AT',
    'CH',
    'GB',
    'IE',
    'PT',
    'SE',
    'NO',
    'DK',
    'FI',
    'PL',
    'CZ',
    'SK',
    'HU',
    'BG',
    'HR',
    'SI',
    'EE',
    'LV',
    'LT',
    'MT',
    'CY',
    'LU',
    'GR'
  %}
    {% assign free_shipping_threshold = block.settings.europe_threshold %}
  {% else %}
    {% assign free_shipping_threshold = block.settings.world_threshold %}
{% endcase %}

{% style %}
  .ai-cart-progress-{{ ai_gen_id }} {
    background-color: {{ block.settings.background_color }};
    padding: {{ block.settings.padding }}px;
    border-radius: {{ block.settings.border_radius }}px;
    margin: 20px 0;
    display: flex;
    flex-direction: column;
  }

  .ai-cart-progress__header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .ai-cart-progress__title-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin: 0;
  }

  .ai-cart-progress__amount-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.amount_size }}px;
    font-weight: 500;
  }

  .ai-cart-progress__bar-container-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.bar_height }}px;
    background-color: {{ block.settings.bar_background_color }};
    border-radius: {{ block.settings.bar_border_radius }}px;
    overflow: hidden;
    position: relative;
  }

  .ai-cart-progress__bar-fill-{{ ai_gen_id }} {
    display: flex !important;
    height: 100%;
    background: {{ block.settings.bar_fill_color }};
    border-radius: {{ block.settings.bar_border_radius }}px;
    transition: width 0.5s ease;
    position: relative;
    overflow: hidden;
    width: 0;
  }

  .ai-cart-progress__bar-fill-{{ ai_gen_id }}.loading {
    animation: ai-cart-progress-load-{{ ai_gen_id }} 1s ease-out forwards;
  }

  @keyframes ai-cart-progress-load-{{ ai_gen_id }} {
    0% { width: 0; }
    100% { width: var(--target-width, 0%); }
  }

  .ai-cart-progress__bar-fill-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: ai-cart-progress-shine-{{ ai_gen_id }} 2s infinite;
  }

  @keyframes ai-cart-progress-shine-{{ ai_gen_id }} {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  .ai-cart-progress__message-{{ ai_gen_id }} {
    margin-top: 12px;
    text-align: center;
    font-size: {{ block.settings.message_size }}px;
    color: {{ block.settings.text_color }};
  }

  .ai-cart-progress__success-{{ ai_gen_id }} {
    color: {{ block.settings.success_color }};
    font-weight: 600;
  }

  .ai-cart-progress__remaining-{{ ai_gen_id }} {
    color: {{ block.settings.accent_color }};
    font-weight: 600;
  }

  .ai-cart-progress__simple-message-{{ ai_gen_id }} {
    text-align: center;
    font-size: {{ block.settings.message_size }}px;
    color: {{ block.settings.text_color }};
    padding: {{ block.settings.padding }}px;
    background-color: {{ block.settings.background_color }};
    border-radius: {{ block.settings.border_radius }}px;
    margin: 20px 0;
  }

  .ai-cart-progress__simple-text-{{ ai_gen_id }} {
    font-weight: 500;
  }

  @media screen and (max-width: 749px) {
    .ai-cart-progress__header-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 8px;text-align: center;
    }
  }
{% endstyle %}

<cart-progress-bar-{{ ai_gen_id }}
  class="ai-cart-progress-{{ ai_gen_id }}"
  data-threshold="{{ free_shipping_threshold }}"
  data-currency-symbol="{{ cart.currency.symbol }}"
  data-current-country="{{ current_country }}"
  data-translations="{{ 'general.free_shipping.title' | t }},{{ 'general.free_shipping.add_more' | t }},{{ 'general.free_shipping.more_for_free_shipping' | t }},{{ 'general.free_shipping.you_qualify' | t }},{{ 'general.free_shipping.remaining_amount' | t }}"
  {{ block.shopify_attributes }}
>
  <!-- Progress Bar Content -->
  <div class="ai-cart-progress__content-{{ ai_gen_id }}">
    <div class="ai-cart-progress__header-{{ ai_gen_id }}">
      <h3 class="ai-cart-progress__title-{{ ai_gen_id }}">{{ 'general.free_shipping.title' | t }}</h3>
      <div class="ai-cart-progress__amount-{{ ai_gen_id }}">
        <span class="ai-cart-progress__current-{{ ai_gen_id }}">{{ cart.total_price | money }}</span>
        <span> / </span>
        <span class="ai-cart-progress__target-{{ ai_gen_id }}">{{ free_shipping_threshold | times: 100 | money }}</span>
      </div>
    </div>

    <div class="ai-cart-progress__bar-container-{{ ai_gen_id }}">
      <div
        class="ai-cart-progress__bar-fill-{{ ai_gen_id }}"
        style="width: 0%;"
      ></div>
    </div>

    <div class="ai-cart-progress__message-{{ ai_gen_id }}">
      <span class="ai-cart-progress__text-{{ ai_gen_id }}"></span>
    </div>
  </div>

  <!-- Simple Message for Empty Cart -->
  <div class="ai-cart-progress__simple-message-{{ ai_gen_id }}" style="display: none;">
    <span class="ai-cart-progress__simple-text-{{ ai_gen_id }}"></span>
  </div>
</cart-progress-bar-{{ ai_gen_id }}>

<script>
  (function() {
    class CartProgressBar{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.threshold = parseFloat(this.dataset.threshold) * 100;
        this.currencySymbol = this.dataset.currencySymbol;
        this.currentCountry = this.dataset.currentCountry;
        this.progressBar = this.querySelector('.ai-cart-progress__bar-fill-{{ ai_gen_id }}');
        this.currentAmount = this.querySelector('.ai-cart-progress__current-{{ ai_gen_id }}');
        this.messageText = this.querySelector('.ai-cart-progress__text-{{ ai_gen_id }}');
        this.progressContent = this.querySelector('.ai-cart-progress__content-{{ ai_gen_id }}');
        this.simpleMessage = this.querySelector('.ai-cart-progress__simple-message-{{ ai_gen_id }}');
        this.simpleText = this.querySelector('.ai-cart-progress__simple-text-{{ ai_gen_id }}');
        this.lastCartTotal = 0;
        this.isUpdating = false;

        // Parse translations
        const translations = this.dataset.translations.split(',');
        this.translations = {
          title: translations[0],
          addMore: translations[1],
          moreForFreeShipping: translations[2],
          youQualify: translations[3],
          remainingAmount: translations[4]
        };
      }

      connectedCallback() {
        this.updateProgress();
        this.setupCartListener();
        this.setupCountryChangeListener();
        this.animateOnLoad();
      }

      setupCountryChangeListener() {
        // Listen for country changes via form submissions
        document.addEventListener('submit', (event) => {
          if (event.target.classList.contains('localization-form')) {
            // Country is being changed, update threshold after a delay
            setTimeout(() => {
              this.updateThresholdForCountry();
            }, 1000);
          }
        });

        // Also listen for URL changes that might indicate country change
        let currentUrl = window.location.href;
        setInterval(() => {
          if (window.location.href !== currentUrl) {
            currentUrl = window.location.href;
            setTimeout(() => {
              this.updateThresholdForCountry();
            }, 500);
          }
        }, 1000);
      }

      updateThresholdForCountry() {
        // Get current country from the page
        const countryElement = document.querySelector('[data-value]');
        if (countryElement) {
          const newCountry = countryElement.dataset.value;
          if (newCountry && newCountry !== this.currentCountry) {
            this.currentCountry = newCountry;
            this.updateThreshold();
            this.fetchCartAndUpdate();
          }
        }
      }

      updateThreshold() {
        // Update threshold based on current country
        let newThreshold = this.threshold / 100; // Convert back to base unit

        switch(this.currentCountry) {
          case 'MD':
            newThreshold = 500;
            break;
          case 'RO':
            newThreshold = 1000;
            break;
          case 'DE':
          case 'FR':
          case 'IT':
          case 'ES':
          case 'NL':
          case 'BE':
          case 'AT':
          case 'CH':
          case 'GB':
          case 'IE':
          case 'PT':
          case 'SE':
          case 'NO':
          case 'DK':
          case 'FI':
          case 'PL':
          case 'CZ':
          case 'SK':
          case 'HU':
          case 'BG':
          case 'HR':
          case 'SI':
          case 'EE':
          case 'LV':
          case 'LT':
          case 'MT':
          case 'CY':
          case 'LU':
          case 'GR':
            newThreshold = 3000;
            break;
          default:
            newThreshold = 5000;
            break;
        }

        this.threshold = newThreshold * 100;
        this.querySelector('.ai-cart-progress__target-{{ ai_gen_id }}').textContent = this.formatMoney(this.threshold);
      }

      setupCartListener() {
        // Listen for custom cart events
        document.addEventListener('cart:updated', () => {
          this.fetchCartAndUpdate();
        });

        // Listen for cart drawer events
        document.addEventListener('cart:drawer:opened', () => {
          this.fetchCartAndUpdate();
        });

        // Listen for quantity changes
        document.addEventListener('change', (event) => {
          if (event.target.matches('[name="updates[]"], .quantity-input, .cart-quantity')) {
            setTimeout(() => this.fetchCartAndUpdate(), 300);
          }
        });

        // Listen for remove buttons
        document.addEventListener('click', (event) => {
          if (event.target.matches('.cart-remove, .remove-item, [data-action="remove"]')) {
            setTimeout(() => this.fetchCartAndUpdate(), 300);
          }
        });

        // Listen for add to cart forms
        document.addEventListener('submit', (event) => {
          if (event.target.matches('form[action*="/cart/add"], .add-to-cart-form')) {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          }
        });

        // Listen for quick add buttons
        document.addEventListener('click', (event) => {
          if (event.target.matches('.quick-add, .quick-add-button, [data-quick-add]')) {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          }
        });

        // Listen for AJAX cart updates
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
              mutation.addedNodes.forEach((node) => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                  // Check if cart-related elements were added
                  if (node.querySelector && (
                    node.querySelector('[data-cart-total]') ||
                    node.querySelector('.cart-total') ||
                    node.querySelector('[data-cart-count]')
                  )) {
                    setTimeout(() => this.fetchCartAndUpdate(), 200);
                  }
                }
              });
            }
          });
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });

        // Initial load
        document.addEventListener('DOMContentLoaded', () => {
          this.fetchCartAndUpdate();
        });

        // Fallback: check for cart updates every 2 seconds
        setInterval(() => {
          this.checkForCartChanges();
        }, 2000);
      }

      async fetchCartAndUpdate() {
        if (this.isUpdating) return; // Prevent concurrent updates
        
        this.isUpdating = true;
        
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          
          // Only update if cart total has actually changed
          if (cart.total_price !== this.lastCartTotal) {
            this.lastCartTotal = cart.total_price;
            this.updateProgressWithCart(cart);
          }
        } catch (error) {
          console.error('Error fetching cart:', error);
          // Initialize with empty cart
          this.updateProgressWithCart({ total_price: 0 });
        } finally {
          this.isUpdating = false;
        }
      }

      updateProgressWithCart(cart) {
        const cartTotal = cart.total_price;
        this.currentAmount.textContent = this.formatMoney(cartTotal);

        // Show simple message if cart is empty, hide progress bar
        if (cartTotal === 0) {
          this.showSimpleMessage();
          return;
        }

        const percentage = Math.min((cartTotal / this.threshold) * 100, 100);
        
        if (cartTotal >= this.threshold) {
          // Hide progress bar and show only success message
          this.showSuccessState();
        } else {
          // Show progress bar and animate update
          this.showProgressState();
          this.animateProgressBar(percentage);
          
          const remaining = this.threshold - cartTotal;
          const remainingFormatted = this.formatMoney(remaining);
          
          // Replace the placeholder with the actual amount
          let message = this.translations.remainingAmount.replace('{{amount}}', remainingFormatted);
          
          // Check if replacement worked
          if (message.includes('{{amount}}')) {
            // Fallback: create a simple message
            message = `Вам не хватает ${remainingFormatted} для бесплатной доставки!`;
          }
          
          // Clear any existing content first
          this.messageText.textContent = '';
          this.messageText.innerHTML = message;
        }
      }

      showSuccessState() {
        // Hide progress bar elements
        const progressContainer = this.querySelector('.ai-cart-progress__bar-container-{{ ai_gen_id }}');
        const header = this.querySelector('.ai-cart-progress__header-{{ ai_gen_id }}');
        
        if (progressContainer) progressContainer.style.display = 'none';
        if (header) header.style.display = 'none';
        
        // Show only success message
        this.messageText.innerHTML = '<span class="ai-cart-progress__success-{{ ai_gen_id }}">' + this.translations.youQualify + '</span>';
      }

      showSimpleMessage() {
        // Show the component
        this.style.display = 'block';
        
        // Hide progress content
        if (this.progressContent) this.progressContent.style.display = 'none';
        
        // Show simple message
        if (this.simpleMessage) {
          this.simpleMessage.style.display = 'block';
          this.simpleText.textContent = `Free shipping available for orders over ${this.formatMoney(this.threshold)}!`;
        }
      }

      showProgressState() {
        // Show the entire progress bar component
        this.style.display = 'flex';
        
        // Hide simple message
        if (this.simpleMessage) this.simpleMessage.style.display = 'none';
        
        // Show progress bar elements
        if (this.progressContent) this.progressContent.style.display = 'block';
        const progressContainer = this.querySelector('.ai-cart-progress__bar-container-{{ ai_gen_id }}');
        const header = this.querySelector('.ai-cart-progress__header-{{ ai_gen_id }}');
        
        if (progressContainer) progressContainer.style.display = 'block';
        if (header) header.style.display = 'flex';
      }

      animateProgressBar(targetPercentage) {
        const currentWidth = parseFloat(this.progressBar.style.width) || 0;
        const targetWidth = targetPercentage;
        
        // Set the CSS custom property for the animation target
        this.progressBar.style.setProperty('--target-width', targetWidth + '%');
        
        // Add loading class to trigger animation
        this.progressBar.classList.add('loading');
        
        // Remove loading class after animation completes
        setTimeout(() => {
          this.progressBar.classList.remove('loading');
          // Ensure final width is set correctly
          this.progressBar.style.width = targetWidth + '%';
        }, 1000);
      }

      checkForCartChanges() {
        // Only check if we're not already updating
        if (this.isUpdating) return;
        
        // Check if cart total has changed by looking for cart-related elements
        const cartTotalElement = document.querySelector('[data-cart-total]');
        const cartTotalText = document.querySelector('.cart-total, .cart__total, [class*="total"]');
        
        if (cartTotalElement || cartTotalText) {
          // If we find cart elements, fetch the latest cart data
          this.fetchCartAndUpdate();
        }
      }

      animateOnLoad() {
        // Set initial width to 0
        this.progressBar.style.width = '0%';
        
        // Get the target percentage for animation
        const cartTotalElement = document.querySelector('[data-cart-total]');
        let cartTotal = 0;

        if (cartTotalElement) {
          cartTotal = parseInt(cartTotalElement.dataset.cartTotal) || 0;
        } else {
          const cartTotalText = document.querySelector('.cart-total, .cart__total, [class*="total"]');
          if (cartTotalText) {
            const totalMatch = cartTotalText.textContent.match(/[\d,]+/);
            cartTotal = totalMatch ? parseInt(totalMatch[0].replace(/,/g, '')) * 100 : 0;
          }
        }

        const percentage = Math.min((cartTotal / this.threshold) * 100, 100);
        
        // Set the CSS custom property for the animation target
        this.progressBar.style.setProperty('--target-width', percentage + '%');
        
        // Add loading class to trigger animation
        this.progressBar.classList.add('loading');
        
        // Remove loading class after animation completes
        setTimeout(() => {
          this.progressBar.classList.remove('loading');
        }, 3000);
      }

      updateProgress() {
        const cartTotalElement = document.querySelector('[data-cart-total]');
        let cartTotal = 0;

        if (cartTotalElement) {
          cartTotal = parseInt(cartTotalElement.dataset.cartTotal) || 0;
        } else {
          const cartTotalText = document.querySelector('.cart-total, .cart__total, [class*="total"]');
          if (cartTotalText) {
            const totalMatch = cartTotalText.textContent.match(/[\d,]+/);
            cartTotal = totalMatch ? parseInt(totalMatch[0].replace(/,/g, '')) * 100 : 0;
          }
        }

        // Show simple message if cart is empty, hide progress bar
        if (cartTotal === 0) {
          this.showSimpleMessage();
          return;
        }

        const percentage = Math.min((cartTotal / this.threshold) * 100, 100);
        this.progressBar.style.width = percentage + '%';

        if (cartTotal >= this.threshold) {
          this.messageText.innerHTML = '<span class="ai-cart-progress__success-{{ ai_gen_id }}">' + this.translations.youQualify + '</span>';
        } else {
          const remaining = this.threshold - cartTotal;
          const remainingFormatted = this.formatMoney(remaining);
          
          // Replace the placeholder with the actual amount
          let message = this.translations.remainingAmount.replace('{{amount}}', remainingFormatted);
          
          // Check if replacement worked
          if (message.includes('{{amount}}')) {
            // Fallback: create a simple message
            message = `Вам не хватает ${remainingFormatted} для бесплатной доставки!`;
          }
          
          // Clear any existing content first
          this.messageText.textContent = '';
          this.messageText.innerHTML = message;
        }
      }

      formatMoney(cents) {
        return this.currencySymbol + (cents / 100).toFixed(2);
      }
    }

    customElements.define('cart-progress-bar-{{ ai_gen_id }}', CartProgressBar{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Cart Progress Bar",
  "settings": [
    {
      "type": "header",
      "content": "Progress Settings"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Free Shipping Progress"
    },
    {
      "type": "header",
      "content": "Free Shipping Thresholds"
    },
    {
      "type": "range",
      "id": "moldova_threshold",
      "min": 100,
      "max": 5000,
      "step": 100,
      "unit": "$",
      "label": "Moldova threshold",
      "default": 500
    },
    {
      "type": "range",
      "id": "romania_threshold",
      "min": 100,
      "max": 5000,
      "step": 100,
      "unit": "$",
      "label": "Romania threshold",
      "default": 1000
    },
    {
      "type": "range",
      "id": "europe_threshold",
      "min": 100,
      "max": 5000,
      "step": 100,
      "unit": "$",
      "label": "Europe threshold",
      "default": 3000
    },
    {
      "type": "range",
      "id": "world_threshold",
      "min": 100,
      "max": 5000,
      "step": 100,
      "unit": "$",
      "label": "World threshold",
      "default": 5000
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Success color",
      "default": "#28a745"
    },
    {
      "type": "range",
      "id": "padding",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Progress Bar"
    },
    {
      "type": "color",
      "id": "bar_background_color",
      "label": "Bar background color",
      "default": "#e9ecef"
    },
    {
      "type": "color",
      "id": "bar_fill_color",
      "label": "Bar fill color",
      "default": "#007bff"
    },
    {
      "type": "range",
      "id": "bar_height",
      "min": 8,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Bar height",
      "default": 12
    },
    {
      "type": "range",
      "id": "bar_border_radius",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Bar border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "amount_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Amount size",
      "default": 14
    },
    {
      "type": "range",
      "id": "message_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Message size",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "Cart Progress Bar"
    }
  ]
}
{% endschema %}
