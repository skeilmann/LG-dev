{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-cart-progress-{{ ai_gen_id }} {
    background-color: {{ block.settings.background_color }};
    padding: {{ block.settings.padding }}px;
    border-radius: {{ block.settings.border_radius }}px;
    margin: 20px 0;}

  .ai-cart-progress__header-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .ai-cart-progress__title-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    margin: 0;
  }

  .ai-cart-progress__amount-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.amount_size }}px;
    font-weight: 500;
  }

  .ai-cart-progress__bar-container-{{ ai_gen_id }} {
    width: 100%;
    height: {{ block.settings.bar_height }}px;
    background-color: {{ block.settings.bar_background_color }};
    border-radius: {{ block.settings.bar_border_radius }}px;
    overflow: hidden;
    position: relative;
  }

  .ai-cart-progress__bar-fill-{{ ai_gen_id }} {
    height: 100%;
    background: {{ block.settings.bar_fill_color }};
    border-radius: {{ block.settings.bar_border_radius }}px;
    transition: width 0.5s ease;
    position: relative;
    overflow: hidden;
  }

  .ai-cart-progress__bar-fill-{{ ai_gen_id }}::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: ai-cart-progress-shine-{{ ai_gen_id }} 2s infinite;
  }

  @keyframes ai-cart-progress-shine-{{ ai_gen_id }} {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  .ai-cart-progress__message-{{ ai_gen_id }} {
    margin-top: 12px;
    text-align: center;
    font-size: {{ block.settings.message_size }}px;
    color: {{ block.settings.text_color }};
  }

  .ai-cart-progress__success-{{ ai_gen_id }} {
    color: {{ block.settings.success_color }};
    font-weight: 600;
  }

  .ai-cart-progress__remaining-{{ ai_gen_id }} {
    color: {{ block.settings.accent_color }};
    font-weight: 600;
  }

  @media screen and (max-width: 749px) {
    .ai-cart-progress__header-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 8px;text-align: center;
    }
  }
{% endstyle %}

<cart-progress-bar-{{ ai_gen_id }}
  class="ai-cart-progress-{{ ai_gen_id }}"
  data-threshold="{{ block.settings.threshold }}"
  data-currency-symbol="{{ cart.currency.symbol }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-cart-progress__header-{{ ai_gen_id }}">
    <h3 class="ai-cart-progress__title-{{ ai_gen_id }}">{{ block.settings.title }}</h3>
    <div class="ai-cart-progress__amount-{{ ai_gen_id }}">
      <span class="ai-cart-progress__current-{{ ai_gen_id }}">{{ cart.total_price | money }}</span>
      <span> / </span>
      <span class="ai-cart-progress__target-{{ ai_gen_id }}">{{ block.settings.threshold | times: 100 | money }}</span>
    </div>
  </div>

  <div class="ai-cart-progress__bar-container-{{ ai_gen_id }}">
    <div
      class="ai-cart-progress__bar-fill-{{ ai_gen_id }}"
      style="width: 0%;"
    ></div>
  </div>

  <div class="ai-cart-progress__message-{{ ai_gen_id }}">
    <span class="ai-cart-progress__text-{{ ai_gen_id }}"></span>
  </div>
</cart-progress-bar-{{ ai_gen_id }}>

<script>
  (function() {
    class CartProgressBar{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.threshold = parseFloat(this.dataset.threshold) * 100;
        this.currencySymbol = this.dataset.currencySymbol;
        this.progressBar = this.querySelector('.ai-cart-progress__bar-fill-{{ ai_gen_id }}');
        this.currentAmount = this.querySelector('.ai-cart-progress__current-{{ ai_gen_id }}');
        this.messageText = this.querySelector('.ai-cart-progress__text-{{ ai_gen_id }}');
      }

      connectedCallback() {
        this.updateProgress();
        this.setupCartListener();
      }

      setupCartListener() {document.addEventListener('cart:updated', () => {
          this.fetchCartAndUpdate();
        });

        document.addEventListener('DOMContentLoaded', () => {
          this.fetchCartAndUpdate();
        });

        const addToCartForms = document.querySelectorAll('form[action*="/cart/add"]');
        addToCartForms.forEach(form => {
          form.addEventListener('submit', () => {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          });
        });

        const cartUpdateButtons = document.querySelectorAll('[name="updates[]"], .cart-remove-button, .cart-update-button');
        cartUpdateButtons.forEach(button => {
          button.addEventListener('click', () => {
            setTimeout(() => this.fetchCartAndUpdate(), 500);
          });
        });
      }

      async fetchCartAndUpdate() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          this.updateProgressWithCart(cart);
        } catch (error) {
          console.error('Error fetching cart:', error);
        }
      }

      updateProgressWithCart(cart) {
        const cartTotal = cart.total_price;
        this.currentAmount.textContent = this.formatMoney(cartTotal);

        const percentage = Math.min((cartTotal / this.threshold) * 100, 100);
        this.progressBar.style.width = percentage + '%';

        if (cartTotal >= this.threshold) {
          this.messageText.innerHTML = '<span class="ai-cart-progress__success-{{ ai_gen_id }}">{{ block.settings.success_message }}</span>';} else {
          const remaining = this.threshold - cartTotal;
          this.messageText.innerHTML = '{{ block.settings.progress_message }} <span class="ai-cart-progress__remaining-{{ ai_gen_id }}">' + this.formatMoney(remaining) + '</span> {{ block.settings.progress_message_suffix }}';
        }
      }

      updateProgress() {
        const cartTotalElement = document.querySelector('[data-cart-total]');
        let cartTotal = 0;

        if (cartTotalElement) {
          cartTotal = parseInt(cartTotalElement.dataset.cartTotal) || 0;
        } else {
          const cartTotalText = document.querySelector('.cart-total, .cart__total, [class*="total"]');
          if (cartTotalText) {
            const totalMatch = cartTotalText.textContent.match(/[\d,]+/);
            cartTotal = totalMatch ? parseInt(totalMatch[0].replace(/,/g, '')) * 100 : 0;
          }
        }

        const percentage = Math.min((cartTotal / this.threshold) * 100, 100);
        this.progressBar.style.width = percentage + '%';

        if (cartTotal >= this.threshold) {
          this.messageText.innerHTML = '<span class="ai-cart-progress__success-{{ ai_gen_id }}">{{ block.settings.success_message }}</span>';
        } else {
          const remaining = this.threshold - cartTotal;
          this.messageText.innerHTML = '{{ block.settings.progress_message }} <span class="ai-cart-progress__remaining-{{ ai_gen_id }}">' + this.formatMoney(remaining) + '</span> {{ block.settings.progress_message_suffix }}';
        }
      }

      formatMoney(cents) {
        return this.currencySymbol + (cents / 100).toFixed(2);
      }
    }

    customElements.define('cart-progress-bar-{{ ai_gen_id }}', CartProgressBar{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Cart Progress Bar",
  "settings": [
    {
      "type": "header",
      "content": "Progress Settings"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Free Shipping Progress"
    },
    {
      "type": "range",
      "id": "threshold",
      "min": 25,
      "max": 500,
      "step": 25,
      "unit": "$",
      "label": "Target amount",
      "default": 100
    },
    {
      "type": "text",
      "id": "progress_message",
      "label": "Progress message",
      "default": "Add"
    },
    {
      "type": "text",
      "id": "progress_message_suffix",
      "label": "Progress message suffix",
      "default": "more for free shipping!"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success message",
      "default": "You qualify for free shipping!"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Success color",
      "default": "#28a745"
    },
    {
      "type": "range",
      "id": "padding",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Padding",
      "default": 20
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Progress Bar"
    },
    {
      "type": "color",
      "id": "bar_background_color",
      "label": "Bar background color",
      "default": "#e9ecef"
    },
    {
      "type": "color",
      "id": "bar_fill_color",
      "label": "Bar fill color",
      "default": "#007bff"
    },
    {
      "type": "range",
      "id": "bar_height",
      "min": 8,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Bar height",
      "default": 12
    },
    {
      "type": "range",
      "id": "bar_border_radius",
      "min": 0,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Bar border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 16
    },
    {
      "type": "range",
      "id": "amount_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Amount size",
      "default": 14
    },
    {
      "type": "range",
      "id": "message_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Message size",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "Cart Progress Bar"
    }
  ]
}
{% endschema %}
